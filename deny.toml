# cargo-deny configuration file
# https://embarkstudios.github.io/cargo-deny/

[graph]
# The path where the output will be written to, if you want to write to stdout 
# instead of a file, use "-"
#output-file = "target/deny-graph.json"

[output]
feature-depth = 1

[licenses]
# The confidence threshold for detecting a license from a license text.
# Expressed as a floating point number in the range 0-1.
confidence-threshold = 0.8

# We want really high confidence when inferring licenses from text
allow = [
    "MIT",
    "Apache-2.0",
    "Apache-2.0 WITH LLVM-exception",
    "BSD-2-Clause",
    "BSD-3-Clause",
    "ISC",
    "Unicode-DFS-2016",
]

# Some crates don't have (easily discoverable) license files and we can be
# confident about their license based on context
[[licenses.clarify]]
name = "ring"
# SPDX 2.1 license expression
expression = "MIT AND ISC AND OpenSSL"
license-files = [
    { path = "LICENSE", hash = 0xbd0eed23 }
]

[bans]
# Lint level for when multiple versions of the same crate are detected
multiple-versions = "warn"
# Lint level for when a crate version requirement is `*`
wildcards = "allow"
# The graph highlighting used when creating dotgraphs for crates
# with multiple versions
# * lowest-version - The path to the lowest versioned duplicate is highlighted
# * simplest-path - The path to the version with the fewest edges is highlighted
# * all - Both lowest-version and simplest-path are used
highlight = "all"

# List of crates that are allowed. Use with care!
allow = [
]

# List of crates to deny
deny = [
    # Each entry has the following fields:
    # * name - The name of the crate
    # * version - The version constraint for the crate
    
    # Deny old versions with known security vulnerabilities
    { name = "openssl", version = "<0.10.55" },
    { name = "rustls", version = "<0.20.8" },
    { name = "tokio", version = "<1.20.1" },
]

# Certain crates/versions that will be skipped when doing duplicate detection.
skip = [
]

# Similarly to `skip` allows you to skip certain crates from being checked. Unlike
# `skip`, a tree-skipped crate is also excluded from the output of the graph.
skip-tree = [
]

[sources]
# Lint level for what to happen when a crate from a crate registry that is
# not in the allow list is encountered
unknown-registry = "warn"
# Lint level for what to happen when a crate from a git repository that is not
# in the allow list is encountered
unknown-git = "warn"

allow-registry = ["https://github.com/rust-lang/crates.io-index"]
allow-git = []

[advisories]
# The path where the advisory database is cloned/fetched into
db-path = "~/.cargo/advisory-db"
# The url(s) of the advisory databases to use
db-urls = ["https://github.com/rustsec/advisory-db"]
# The lint level for security vulnerabilities
vulnerability = "deny"
# The lint level for unmaintained crates
unmaintained = "warn"
# The lint level for crates that have been yanked from their source registry
yanked = "warn"
# The lint level for crates with security notices. Note that as of
# 2019-12-17 there are no security notice advisories in
# https://github.com/rustsec/advisory-db
notice = "warn"
# A list of advisory IDs to ignore. Note that ignored advisories will still
# output a note when they are encountered.
ignore = [
]