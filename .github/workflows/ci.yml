name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  test:
    name: Test Suite
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable
      with:
        components: rustfmt, clippy

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check formatting
      run: cargo fmt --all -- --check

    - name: Run Clippy
      run: cargo clippy --workspace --all-targets --all-features -- -D warnings

    - name: Build workspace
      run: cargo build --workspace --verbose

    - name: Run unit tests
      run: cargo test --test unit_tests --workspace --verbose

    - name: Run macro tests
      run: cargo test --test macro_tests --workspace --verbose

    - name: Run library tests
      run: cargo test --lib --workspace --verbose

    - name: Run integration tests
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: cargo test --test integration_tests --workspace --verbose -- --test-threads=1

    - name: Test examples compile
      run: |
        cargo check -p sqlx-repository --example basic_usage
        cargo check -p sqlx-repository --example soft_delete

    - name: Run doc tests
      run: cargo test --doc --workspace

    - name: Check docs build
      run: cargo doc --workspace --no-deps --document-private-items

  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:14
        env:
          POSTGRES_PASSWORD: postgres
          POSTGRES_USER: postgres
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432

    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-tarpaulin
      uses: taiki-e/install-action@cargo-tarpaulin

    - name: Generate code coverage
      env:
        DATABASE_URL: postgres://postgres:postgres@localhost:5432/test_db
      run: |
        cargo tarpaulin \
          --workspace \
          --timeout 120 \
          --out xml \
          --output-dir coverage/ \
          --skip-clean \
          --exclude-files "*/target/*" "*/tests/*" "*/examples/*" \
          --ignore-panics \
          --ignore-tests \
          -- --test-threads=1

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v4
      with:
        file: ./coverage/cobertura.xml
        flags: unittests
        name: codecov-umbrella
        fail_ci_if_error: false
        token: ${{ secrets.CODECOV_TOKEN }}

    - name: Upload coverage artifact
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report
        path: coverage/

    - name: Comment coverage on PR
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      with:
        script: |
          const fs = require('fs');
          
          // Read coverage XML and extract percentage
          let coveragePercent = 'Unknown';
          try {
            const coverageXml = fs.readFileSync('./coverage/cobertura.xml', 'utf8');
            const match = coverageXml.match(/line-rate="([0-9.]+)"/);
            if (match) {
              coveragePercent = (parseFloat(match[1]) * 100).toFixed(1) + '%';
            }
          } catch (e) {
            console.log('Could not read coverage file:', e.message);
          }

          const comment = `## ðŸ“Š Code Coverage Report
          
          **Coverage**: ${coveragePercent}
          
          Full coverage report available in the [coverage artifact](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}).
          
          _This comment is automatically generated by the CI workflow._`;

          // Find existing coverage comment
          const { data: comments } = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: context.issue.number,
          });

          const botComment = comments.find(comment => 
            comment.user.type === 'Bot' && 
            comment.body.includes('ðŸ“Š Code Coverage Report')
          );

          if (botComment) {
            // Update existing comment
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: comment
            });
          } else {
            // Create new comment
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
              body: comment
            });
          }

  security:
    name: Security Audit
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust
      uses: dtolnay/rust-toolchain@stable

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Install cargo-audit
      uses: taiki-e/install-action@cargo-audit

    - name: Run security audit
      run: cargo audit

    - name: Install cargo-deny
      uses: taiki-e/install-action@cargo-deny

    - name: Run cargo-deny
      run: cargo deny check

  msrv:
    name: Minimum Supported Rust Version
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v4

    - name: Install Rust 1.70 (MSRV)
      uses: dtolnay/rust-toolchain@master
      with:
        toolchain: 1.70.0

    - name: Cache Rust dependencies
      uses: Swatinem/rust-cache@v2

    - name: Check MSRV build
      run: cargo check --workspace